// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.

import { SecurePeerRelay, type SecureRelayMessage } from 'securepeerkey'

import { type SecurePushMessage } from 'securepushjs/src'
import { clientsClaim } from 'workbox-core'
import { createHandlerBoundToURL, precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'

declare const self: ServiceWorkerGlobalScope

clientsClaim()

// precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

cleanupOutdatedCaches()

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = /\/[^/?]+\.[^/]+$/
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request, url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp) != null) {
      return false
    }

    // Return true to signal that we want to use the handler.
    return true
  },
  createHandlerBoundToURL(`${process.env.PUBLIC_URL ?? 'NO_process.env.PUBLIC_URL!'}/index.html`)
)

// ---------- SYNC WITH service-worker-test-push.js (not used in vite dev?)

let securePeerRelay: SecurePeerRelay

self.addEventListener('message', handleMessage)
self.addEventListener('push', handlePush)
self.addEventListener('notificationclick', handleNotificationclick, false)

function handleMessage (event: ExtendableMessageEvent): void {
  console.debug('SW received message event!', event)
  if (event.data.type === 'SKIP_WAITING') {
    // This allows the web app to trigger skipWaiting
    self.skipWaiting()
  } else if (event.data.type === 'SEND_KEY') {
    securePeerRelay = new SecurePeerRelay(event.data.key)
    console.info('ServiceWorker received key', securePeerRelay)
  }
}

async function handlePush (pushEvent: PushEvent): Promise<void> {
  console.info('Push Event received!', pushEvent)

  const payload: string = pushEvent.data?.text() ?? ''
  if (payload.length === 0) {
    console.warn('No push data available')
    return
  }
  let relayedMessage: SecureRelayMessage
  try {
    relayedMessage = JSON.parse(payload)
  } catch {
    console.warn(`Unrecognized payload: ${payload}`)
    return
  }

  console.debug('Encrypted push data.text', payload)

  let message: SecurePushMessage
  try {
    message = JSON.parse(securePeerRelay.decryptFromRelay(relayedMessage))
  } catch (e) {
    console.error(e)
    return
  }

  // const contact = contacts?.get(message.sender)

  // if (!contact) {
  //   console.warn('Received Push from unknown contact', payload)
  //   return
  // } else console.log('Found contacts for pushmessage ', contact)

  const actionOpen = {
    title: 'Open',
    action: 'open'
  }
  const actionClose = {
    title: 'Close',
    action: 'close'
  }

  const notificationOptions: NotificationOptions = {
    body: message.payload,
    badge: contact?.avatar,
    //    image: contact.avatar,
    //    icon: 'https://volatalk.org/mstile-150x150.png',
    icon: contact?.avatar,
    vibrate: [1000, 2000, 3000, 4000, 5000],
    actions: [actionOpen, actionClose],
    requireInteraction: message.urgent,
    renotify: message.urgent,
    data: contact?.peerid
  }
  self.registration.showNotification(contact?.nickname, notificationOptions)
}

/**
 * https://developer.mozilla.org/en-US/docs/Web/API/Clients/openWindow
 * https://w3c.github.io/ServiceWorker/#clients-openwindow
 *
 */

function handleNotificationclick (event: NotificationEvent): void {
  console.debug('Clicked pushed notification', event)
  event.notification.close()

  console.log('self.location.origin', self.location.origin)
  event.waitUntil(
    self.clients.matchAll({ type: 'window' }).then((clientsArr) => {
      // console.debug('Open windows: ' + clientsArr)
      // If a Window tab matching the targeted URL already exists, focus that;
      const hadWindowToFocus = clientsArr.some((windowClient) =>
        (windowClient.url.includes(self.location.origin) === true) ? (windowClient.focus(), true) : false
      )
      // Otherwise, open a new tab to the applicable URL and focus it.
      if (hadWindowToFocus === false) {
        self.clients
          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
          .openWindow(`${self.location.origin}/messages/${event.notification.data}`)
          .then(async (windowClient) => ((windowClient != null) ? windowClient.focus() : null))
      }
    })
  )
}

// In the service worker:
self.clients.matchAll().then((clients) => {
  clients.forEach((client) => {
    client.postMessage({ message: 'Hello from the service worker!' })
  })
})
