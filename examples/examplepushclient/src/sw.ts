// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.

import { SecureCommunicationKey, initSecurePush } from 'securepushjs'
import { clientsClaim } from 'workbox-core'
import { // createHandlerBoundToURL,
  precacheAndRoute, cleanupOutdatedCaches
} from 'workbox-precaching'
// import { registerRoute } from 'workbox-routing'

declare const self: ServiceWorkerGlobalScope

console.info('Registering SW')
clientsClaim()

// precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

cleanupOutdatedCaches()

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
// const fileExtensionRegexp = /\/[^/?]+\.[^/]+$/
// registerRoute(
//   // Return false to exempt requests from being fulfilled by index.html.
//   ({ request, url }: { request: Request, url: URL }) => {
//     // If this isn't a navigation, skip.
//     if (request.mode !== 'navigate') {
//       return false
//     }

//     // If this is a URL that starts with /_, skip.
//     if (url.pathname.startsWith('/_')) {
//       return false
//     }

//     // If this looks like a URL for a resource, because it contains
//     // a file extension, skip.
//     if (url.pathname.match(fileExtensionRegexp) != null) {
//       return false
//     }

//     // Return true to signal that we want to use the handler.
//     return true
//   },
//   createHandlerBoundToURL('/index.html')
// )

// ---------- SYNC WITH service-worker-test-push.js (not used in vite dev?)

SecureCommunicationKey.create().then(key => {
  initSecurePush(self, key)
}).catch(console.error)

// In the service worker:
self.clients.matchAll().then((clients) => {
  clients.forEach((client) => {
    client.postMessage({ message: 'Hello from the service worker!' })
  })
})
